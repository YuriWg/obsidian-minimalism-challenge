import { App, Editor, MarkdownView, Modal, Notice, Plugin, PluginSettingTab, Setting, TFile, ItemView, WorkspaceLeaf } from 'obsidian';
// ÂÆö‰πâÁâ©ÂìÅÂàÜÁ±ª
const ITEM_CATEGORIES: {
    [key: string]: { color: string; icon: string; order: number };
} = {
	"Ë°£Áâ©": {color: "#B4846C", icon: "üß£", order: 1},
	"Êó•Áî®ÂìÅ": {color: "#A7B89D", icon: "üß¥", order: 2},
	"È£üÁâ©": {color: "#E1A692", icon: "üçï", order: 3},
	"ÁîµÂ≠ê‰∫ßÂìÅ": {color: "#7895B2", icon: "üì±", order: 4},
	"ÊñáÂÖ∑": {color: "#BBAB8C", icon: "‚úèÔ∏è", order: 5},
	"‰π¶Á±ç": {color: "#E5BA73", icon: "üìñ", order: 6},
	"Ë£ÖÈ•∞ÂìÅ": {color: "#C17C74", icon: "üéÄ", order: 7},
	"ÂÖ∂ÂÆÉ": {color: "#939B9F", icon: "ü´ô", order: 8},
	"default": {color: "#e8e8e8", icon: "üìé", order: 9}
};

// ÂÆö‰πâÂ§ÑÁêÜÊñπÂºè
const DISPOSAL_METHODS: {
    [key: number]: { label: string; icon: string };
} = {
	0: { label: "Á´ãÂç≥Â§ÑÁêÜ", icon: "üóëÔ∏è"},
	20: { label: "Êé®ËçêËàçÂºÉ", icon: "üì§"},
	40: { label: "ÁÅµÊ¥ªÂ§ÑÁêÜ", icon: "üîÑ"},
	60: { label: "Âª∫ËÆÆ‰øùÁïô", icon: "üì•"},
	80: { label: "ÂøÖÈ°ª‰øùÁïô", icon: "üì¶"}
};

interface MinimalismChallengeSettings {
	challengeYear: number;  // Ê∑ªÂä†Âπ¥‰ªΩËÆæÁΩÆ
	challengeMonth: number;
	lifeStage: number;
	dataFilePath: string;
	markdownTable: string;
	scoreWeights: {
		freq: number;
		necessity: number;
		irreplace: number;
		space: number;
		multifunction: number;
		emotion: number;
		maintenance: number;
		cost: number;
		[key: string]: number; // Ê∑ªÂä†Á¥¢ÂºïÁ≠æÂêç
	};
}

const DEFAULT_SETTINGS: MinimalismChallengeSettings = {
	challengeYear: new Date().getFullYear(),  // ÈªòËÆ§‰∏∫ÂΩìÂâçÂπ¥‰ªΩ
	challengeMonth: new Date().getMonth() ,
	lifeStage: 1,
	dataFilePath: 'minimalism_items_template.md',
	markdownTable: '', // ÈªòËÆ§‰∏∫Á©∫
	scoreWeights: { // ÈªòËÆ§ÊùÉÈáçÂùá‰∏∫1
		freq: 0.8,       // ‰ΩøÁî®È¢ëÁéáÊùÉÈáçËæÉÈ´ò
		necessity: 0.9,   // ÂøÖË¶ÅÊÄßÊùÉÈáçÊúÄÈ´ò
		irreplace: 0.7,   // ‰∏çÂèØÊõø‰ª£ÊÄß‰∏≠Á≠âÂÅè‰∏ä
		space: 0.6,       // Á©∫Èó¥Ë¥üÊãÖ‰∏≠Á≠â
		multifunction: 0.5, // Â§öÂäüËÉΩÊÄß‰∏≠Á≠â
		emotion: 0.4,     // ÊÉÖÊÑü‰ª∑ÂÄº‰∏≠Á≠âÂÅè‰∏ã
		maintenance: 0.3, // Áª¥Êä§Ë¥πÁî®ËæÉ‰Ωé
		cost: 0.2       // Ëé∑ÂèñÊàêÊú¨ÊúÄ‰Ωé
	}
}

// ÂÆö‰πâËßÜÂõæÁ±ªÂûã
const MINIMALISM_VIEW_TYPE = 'minimalism-challenge-view';

export default class MinimalismChallengePlugin extends Plugin {
	settings: MinimalismChallengeSettings;
	private activateView() {
        let leaf = this.app.workspace.getLeavesOfType(MINIMALISM_VIEW_TYPE)[0];

        if (!leaf) {
            const rightLeaf = this.app.workspace.getRightLeaf(false);
            if (!rightLeaf) {
                throw new Error('Êó†Ê≥ïÂàõÂª∫Êñ∞ÁöÑÂ∑•‰ΩúÂå∫Âè∂Â≠ê');
            }
            leaf = rightLeaf;
            leaf.setViewState({
                type: MINIMALISM_VIEW_TYPE,
                active: true,
            });
        } else {
            this.app.workspace.revealLeaf(leaf);
        }
    }

	async onload() {
		await this.loadSettings();
		// Ê£ÄÊü•Âπ∂Êõ¥Êñ∞ÁâπÂÆöËÆæÁΩÆ
		let needsUpdate = false;
    
		// Ê£ÄÊü• cost ÂÄºÊòØÂê¶ÈúÄË¶ÅÊõ¥Êñ∞
		if (this.settings.scoreWeights.cost !== 0.2) {
			this.settings.scoreWeights.cost = 0.2;
			needsUpdate = true;
		}
		
		// Â¶ÇÊûúÊúâËÆæÁΩÆÈúÄË¶ÅÊõ¥Êñ∞Ôºå‰øùÂ≠òËÆæÁΩÆ
		if (needsUpdate) {
			await this.saveSettings();
			console.log('Â∑≤Êõ¥Êñ∞ËÆæÁΩÆÂÄºÂà∞ÊúÄÊñ∞ÈªòËÆ§ÂÄº');
		}
        this.addStyles();

		// Ê£ÄÊü•Êï∞ÊçÆÊñá‰ª∂ÊòØÂê¶Â≠òÂú®ÔºåÂ¶ÇÊûú‰∏çÂ≠òÂú®ÂàôÂàõÂª∫ÈªòËÆ§Êï∞ÊçÆÊñá‰ª∂
		try {
			await this.ensureDataFileExists();
		} catch (error) {
			console.error('ÂàùÂßãÂåñÊï∞ÊçÆÊñá‰ª∂Â§±Ë¥•:', error);
			// ‰∏çÊòæÁ§∫ÈîôËØØÈÄöÁü•ÔºåÈÅøÂÖçÊØèÊ¨°Âä†ËΩΩÈÉΩÊèêÁ§∫
		}

        // Ê≥®ÂÜåËßÜÂõæÁ±ªÂûã
        this.registerView(
            MINIMALISM_VIEW_TYPE,
            (leaf) => new MinimalismChallengeView(leaf, this)
        );

        // Ê∑ªÂä†ÂäüËÉΩÂå∫ÂõæÊ†á
        const ribbonIconEl = this.addRibbonIcon('calendar-with-checkmark', 'ÊûÅÁÆÄ‰∏ª‰πâÊåëÊàòÊó•ÂéÜ', () => {
            this.activateView();
        });
        ribbonIconEl.addClass('minimalism-challenge-ribbon-class');

        // Ê∑ªÂä†ÂëΩ‰ª§
        this.addCommand({
            id: 'open-minimalism-calendar',
            name: 'ÊâìÂºÄÊûÅÁÆÄ‰∏ª‰πâÊåëÊàòÊó•ÂéÜ',
            callback: () => {
                this.activateView();
            }
        });
        
        // Ê∑ªÂä†ÂàõÂª∫Êï∞ÊçÆÊñá‰ª∂Ê®°ÊùøÁöÑÂëΩ‰ª§
        this.addCommand({
            id: 'create-minimalism-data-template',
            name: 'ÂàõÂª∫ÊûÅÁÆÄ‰∏ª‰πâÊåëÊàòÊï∞ÊçÆÊ®°Êùø',
            callback: async () => {
                await this.createDataFileTemplate();
            }
        });

        // Ê∑ªÂä†ËÆæÁΩÆÈÄâÈ°πÂç°
        this.addSettingTab(new MinimalismChallengeSettingTab(this.app, this));
    }
	// Ê∑ªÂä†ÈáçÁΩÆËÆæÁΩÆÊñπÊ≥ï
	async resetSettings() {
		this.settings = Object.assign({}, DEFAULT_SETTINGS);
		await this.saveSettings();
		new Notice('ËÆæÁΩÆÂ∑≤ÈáçÁΩÆ‰∏∫ÈªòËÆ§ÂÄº');
	}
	// Ê∑ªÂä†‰∏Ä‰∏™Êñ∞ÊñπÊ≥ïÊù•Ê£ÄÊü•Âπ∂Á°Æ‰øùÊï∞ÊçÆÊñá‰ª∂Â≠òÂú®
	async ensureDataFileExists() {
		try {
			const filePath = this.settings.dataFilePath;
			// Ê£ÄÊü•Ë∑ØÂæÑÊòØÂê¶ÊúâÊïà
			if (!filePath || filePath.trim() === '') {
				console.log('Êñá‰ª∂Ë∑ØÂæÑ‰∏∫Á©∫Ôºå‰ΩøÁî®ÈªòËÆ§Ë∑ØÂæÑ');
				this.settings.dataFilePath = DEFAULT_SETTINGS.dataFilePath;
				await this.saveData(this.settings);
			}
			
			const file = this.app.vault.getAbstractFileByPath(this.settings.dataFilePath);
			
			// Â¶ÇÊûúÊñá‰ª∂‰∏çÂ≠òÂú®ÔºåÂàôÂàõÂª∫ÈªòËÆ§Êï∞ÊçÆÊñá‰ª∂
			if (!file) {
				console.log('Êï∞ÊçÆÊñá‰ª∂‰∏çÂ≠òÂú®ÔºåÂàõÂª∫ÈªòËÆ§Êï∞ÊçÆÊñá‰ª∂');
				try {
					await this.createDataFileTemplate();
					console.log('ÊàêÂäüÂàõÂª∫ÈªòËÆ§Êï∞ÊçÆÊñá‰ª∂');
				} catch (error) {
					// Â¶ÇÊûúÂàõÂª∫Â§±Ë¥•‰ΩÜÈîôËØØÊòØ"Êñá‰ª∂Â∑≤Â≠òÂú®"ÔºåÂ∞ùËØïÁõ¥Êé•Âä†ËΩΩËØ•Êñá‰ª∂
					if (error.message && error.message.includes('already exists')) {
						console.log('Êñá‰ª∂Â∑≤Â≠òÂú®ÔºåÂ∞ùËØïÁõ¥Êé•Âä†ËΩΩ');
						await this.loadItemsData();
					} else {
						throw error;
					}
				}
			} else {
				console.log('Êï∞ÊçÆÊñá‰ª∂Â∑≤Â≠òÂú®:', this.settings.dataFilePath);
				// Êñá‰ª∂Â≠òÂú®ÔºåÁõ¥Êé•Âä†ËΩΩ
				await this.loadItemsData();
			}
		} catch (error) {
			console.error('Ê£ÄÊü•Êï∞ÊçÆÊñá‰ª∂Êó∂Âá∫Èîô:', error);
			// ‰∏çË¶ÅÂú®ËøôÈáåÊòæÁ§∫ÈîôËØØÈÄöÁü•ÔºåÈÅøÂÖçÊØèÊ¨°Âä†ËΩΩÈÉΩÊèêÁ§∫
		}
	}


	private addStyles() {
		const styleEl = document.head.querySelector('style#minimalism-challenge-styles');
		if (styleEl) styleEl.remove();
		
		const style = document.createElement('style');
    style.id = 'minimalism-challenge-styles';
    style.type = 'text/css';
    style.textContent = `
        .minimalism-challenge-view {
            padding: clamp(10px, 2vw, 20px);
            overflow-y: auto;
            width: 100% !important;
            height: 100%;
            max-width: 1000px !important;
            margin: 0 auto !important;
            box-sizing: border-box !important;
        }
        
        .workspace-leaf-content[data-type="${MINIMALISM_VIEW_TYPE}"] {
            display: flex;
            justify-content: center;
            align-items: flex-start;
            width: 100% !important;
        }
        
        .workspace-leaf-content[data-type="${MINIMALISM_VIEW_TYPE}"] .view-content {
            width: 100% !important; /* Êîπ‰∏∫Ëá™Âä®ÂÆΩÂ∫¶ */
            max-width: 1000px !important;
        }
        .minimalism-calendar-container {
            background: linear-gradient(135deg, #f5f5f5 0%, #fafafa 100%);
            border-radius: 18px;
            padding: clamp(20px, 3vw, 40px);
            margin: clamp(10px, 2vw, 20px) 0;
            box-shadow: 0 6px 15px rgba(0,0,0,0.05);
            overflow-y: auto;
            width: 100% !important;
            height: 100%;
            max-width: 1000px !important;  /* ÊúÄÂ§ßÂÆΩÂ∫¶ÈôêÂà∂ */
            margin: 0 auto !important;     /* Â±Ö‰∏≠ÊòæÁ§∫ */
            box-sizing: border-box !important;
        }
			/* Á°Æ‰øùÂÜÖÈÉ®ÂÖÉÁ¥†‰∏ç‰ºöË∂ÖÂá∫ÂÆπÂô® */
			.minimalism-calendar-container > * {
				max-width: 100% !important;
			}
			.minimalism-title {
            text-align: center;
            color: #A67F5D;
            font-family: 'Futura', 'Trebuchet MS', -apple-system;
            font-weight: 700;
            font-size: clamp(36px, 5vw, 60px);
            margin: 20px 0 15px;
            opacity: 0.85;
            letter-spacing: -1.5px;
        }

        .minimalism-subtitle {
            text-align: center;
            color: #BEA98B;
            font-family: 'Helvetica Neue', 'Arial', -apple-system;
            font-weight: 500;
            font-size: clamp(20px, 3vw, 30px);
            margin: 0 0 30px;
            opacity: 0.75;
            letter-spacing: 0.2px;
        }

        .stats-panel {
            display: flex;
            flex-direction: column;
            gap: clamp(10px, 2vw, 15px);
            margin: clamp(15px, 3vw, 20px) 0;
            padding: clamp(15px, 2vw, 20px);
        }

        @media (max-width: 768px) {
            .minimalism-calendar-container {
                padding: clamp(15px, 2vw, 25px);
            }
            
            .stats-grid {
                grid-template-columns: 1fr !important;
            }
            
            .category-grid {
                grid-template-columns: repeat(auto-fill, minmax(100px, 1fr)) !important;
            }
        }

        @media (max-width: 480px) {
            .minimalism-title {
                font-size: clamp(28px, 4vw, 36px);
            }
            
            .minimalism-subtitle {
                font-size: clamp(16px, 2.5vw, 20px);
            }
        }
		`;
		document.head.appendChild(style);
	}
	
	onunload() {
        // Ê∏ÖÁêÜËßÜÂõæ
        this.app.workspace.detachLeavesOfType(MINIMALISM_VIEW_TYPE);
		// Ê∏ÖÁêÜÊ†∑Âºè
		const styleEl = document.head.querySelector('style#minimalism-challenge-styles');
		if (styleEl) styleEl.remove();
	}

	// Ê∑ªÂä†Âä†ËΩΩËÆæÁΩÆÊñπÊ≥ï
	async loadSettings() {
		this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
	}
	
	// ‰øÆÊîπ createDataFileTemplate ÊñπÊ≥ï
	async createDataFileTemplate() {
		const filePath = this.settings.dataFilePath;
		// Ê£ÄÊü•Ë∑ØÂæÑÊòØÂê¶ÊúâÊïà
		if (!filePath || filePath.trim() === '') {
			throw new Error('Êñá‰ª∂Ë∑ØÂæÑ‰∏çËÉΩ‰∏∫Á©∫');
		}
		
		// ÂÖàÊ£ÄÊü•Êñá‰ª∂ÊòØÂê¶Â∑≤Â≠òÂú®
		const file = this.app.vault.getAbstractFileByPath(filePath);
		if (file && file instanceof TFile) {
			console.log(`Êñá‰ª∂Â∑≤Â≠òÂú®: ${filePath}ÔºåË∑≥ËøáÂàõÂª∫`);
			// Êñá‰ª∂Â∑≤Â≠òÂú®ÔºåÁõ¥Êé•ËøîÂõûÔºå‰∏çÊäõÂá∫ÈîôËØØ
			return;
		}
		
		// Ëé∑ÂèñÂΩìÂâçËÆæÁΩÆÁöÑÂπ¥‰ªΩÂíåÊúà‰ªΩ
		const year = this.settings.challengeYear;
		const month = String(this.settings.challengeMonth).padStart(2, '0');
		
		// ÂàõÂª∫Ë°®Â§¥
		const headers = ['Êó•Êúü', 'Áâ©ÂìÅ', 'ËÆ∞ÂøÜ', 'ÂëäÂà´ËØ≠', 'ÂàÜÁ±ª', '‰ΩøÁî®È¢ëÁéá', 'ÂøÖË¶ÅÊÄß', '‰∏çÂèØÊõø‰ª£ÊÄß', 'Á©∫Èó¥Ë¥üÊãÖ', 'Â§öÂäüËÉΩÊÄß', 'ÊÉÖÊÑü‰ª∑ÂÄº', 'Áª¥Êä§Ë¥πÁî®', 'Ëé∑ÂèñÊàêÊú¨'];
		
		// ÂàõÂª∫Á§∫‰æãÊï∞ÊçÆË°å
		const templateRows = [
			`| ${year}-${month}-01 | ÊóßTÊÅ§ | Â§ßÂ≠¶Êó∂ÊúüË¥≠‰π∞ÁöÑTÊÅ§ÔºåÂ∑≤ÁªèÊúâ‰∫õË§™Ëâ≤ÂíåÁ£®ÊçüÔºå‰ΩÜÊõæÊòØÊàëÊúÄÂñúÊ¨¢ÁöÑ‰∏Ä‰ª∂Ë°£Êúç„ÄÇ | Èô™‰º¥‰∫ÜÊàëÁöÑÈùíÊò•Â≤ÅÊúàÔºåÊÑüË∞¢‰Ω†ÁöÑÊúçÂä° | Ë°£Áâ© | 20 | 30 | 40 | 60 | 50 | 75 | 10 | 40 |`,
			`| ${year}-${month}-02 | ÊóßÊâãÊú∫ÂÖÖÁîµÂô® | ÈöèÁùÄÊâãÊú∫Êõ¥Êñ∞Êç¢‰ª£ÔºåËøô‰∏™ÂÖÖÁîµÂô®Â∑≤Áªè‰∏çÂ§™ÈÄÇÁî®Ôºå‰ΩÜ‰∏ÄÁõ¥Ëàç‰∏çÂæóÊâîÊéâ„ÄÇ | ÊõæÁªèÁöÑËÉΩÈáè‰æõÂ∫îËÄÖÔºåÁé∞Âú®ÂèØ‰ª•‰ºëÊÅØ‰∫Ü | ÁîµÂ≠ê‰∫ßÂìÅ | 10 | 15 | 5 | 70 | 10 | 5 | 0 | 30 |`,
			`| ${year}-${month}-03 | Êú™ËØªÂÆåÁöÑ‰π¶ | Ë¥≠‰π∞ÂêéÂè™ËØª‰∫ÜÂá†È°µÂ∞±ÊêÅÁΩÆÁöÑ‰π¶Ôºå‰∏ÄÁõ¥ÊÉ≥ÊâæÊó∂Èó¥ËØªÂÆå‰ΩÜÂßãÁªàÊ≤°ÊúâË°åÂä®„ÄÇ | ÊÑø‰Ω†Âú®Êñ∞‰∏ª‰∫∫Êâã‰∏≠Ë¢´ÂÆåÊï¥ÈòÖËØª | ‰π¶Á±ç | 5 | 20 | 30 | 60 | 40 | 25 | 0 | 50 |`,
			`| ${year}-${month}-04 | Ë£ÖÈ•∞Ëä±Áì∂ | Êê¨ÂÆ∂Êó∂Ë¥≠‰π∞ÁöÑË£ÖÈ•∞ÂìÅÔºå‰ΩÜ‰∏éÊñ∞ÂÆ∂ÁöÑÈ£éÊ†º‰∏çÂ§™Êê≠ÈÖçÔºå‰∏ÄÁõ¥ÊîæÂú®ËßíËêΩÈáå„ÄÇ | ÊÑø‰Ω†Âú®Êñ∞ÂÆ∂‰∏≠ÁªΩÊîæÂÖâÂΩ© | Ë£ÖÈ•∞ÂìÅ | 0 | 10 | 20 | 50 | 30 | 15 | 20 | 60 |`,
			`| ${year}-${month}-05 | ËøáÊúüÊä§ËÇ§ÂìÅ | ÊõæÁªèÁÉ≠Ë°∑Â∞ùËØïÁöÑÊä§ËÇ§‰∫ßÂìÅÔºå‰ΩøÁî®Âá†Ê¨°ÂêéÂ∞±Ë¢´ÈÅóÂøòÂú®ÊäΩÂ±âÈáå„ÄÇ | Ë∞¢Ë∞¢‰Ω†ËÆ©ÊàëËÆ§ËØÜÂà∞ÁÆÄÂçïÊä§ËÇ§ÁöÑÈáçË¶Å | Êó•Áî®ÂìÅ | 5 | 10 | 5 | 80 | 10 | 0 | 10 | 70 |`
		];
		
		// ÁªÑÂêàÊàêÂÆåÊï¥ÁöÑMarkdownË°®Ê†º
		const markdownTable = [
			`| ${headers.join(' | ')} |`,
			`| ${headers.map(() => '---').join(' | ')} |`,
			...templateRows
		].join('\n');
		
		// ÂàõÂª∫Ê®°ÊùøÂÜÖÂÆπ
		const templateContent = 
	`---
	created: ${new Date().toISOString().split('T')[0]}
	updated: ${new Date().toISOString().split('T')[0]}
	---

	# ÊûÅÁÆÄ‰∏ª‰πâÊåëÊàòÁâ©ÂìÅÊï∞ÊçÆ

	‰ª•‰∏ãÊòØÊûÅÁÆÄ‰∏ª‰πâÊåëÊàòÁöÑÁâ©ÂìÅËÆ∞ÂΩïË°®Ê†º„ÄÇÊÇ®ÂèØ‰ª•Áõ¥Êé•Âú®Ê≠§Êñá‰ª∂‰∏≠ÁºñËæëË°®Ê†ºÂÜÖÂÆπÔºåÊèí‰ª∂‰ºöËá™Âä®ËØªÂèñÂπ∂ÊòæÁ§∫„ÄÇ

	${markdownTable}

	## Ë°®Ê†ºËØ¥Êòé
	- Êó•ÊúüÊ†ºÂºèÔºöYYYY-MM-DD
	- ÂàÜÁ±ªÂèØÈÄâÂÄºÔºöË°£Áâ©„ÄÅÁîµÂ≠ê‰∫ßÂìÅ„ÄÅ‰π¶Á±ç„ÄÅÊñáÂÖ∑„ÄÅÂé®ÂÖ∑„ÄÅÊó•Áî®ÂìÅ„ÄÅË£ÖÈ•∞ÂìÅ„ÄÅÂÖ∂ÂÆÉ
	- ÂêÑËØÑÂàÜÈ°πÁõÆËåÉÂõ¥Ôºö0-100ÔºåÊï∞ÂÄºË∂äÈ´òË°®Á§∫ËØ•È°πËØÑÂàÜË∂äÈ´ò
	`;

		try {
			// ÂÜçÊ¨°Ê£ÄÊü•Êñá‰ª∂ÊòØÂê¶Â≠òÂú®Ôºà‰ª•Èò≤Âú®Ê≠§ÊúüÈó¥Ë¢´ÂàõÂª∫Ôºâ
			const fileCheck = this.app.vault.getAbstractFileByPath(filePath);
			if (fileCheck && fileCheck instanceof TFile) {
				console.log(`Êñá‰ª∂Â∑≤Â≠òÂú®: ${filePath}ÔºåË∑≥ËøáÂàõÂª∫`);
				return;
			}
			
			// ÂàõÂª∫Êñá‰ª∂
			await this.app.vault.create(filePath, templateContent);
			console.log(`Â∑≤ÂàõÂª∫Êï∞ÊçÆÊ®°Êùø: ${filePath}`);
			
			// Êõ¥Êñ∞ËÆæÁΩÆ‰∏≠ÁöÑmarkdownTable
			this.settings.markdownTable = templateContent;
			await this.saveData(this.settings);
		} catch (error) {
			// Â¶ÇÊûúÈîôËØØÊòØ"Êñá‰ª∂Â∑≤Â≠òÂú®"Ôºå‰∏çË¶ÅÊäõÂá∫ÈîôËØØÔºåËÄåÊòØÂ∞ùËØïÂä†ËΩΩÁé∞ÊúâÊñá‰ª∂
			if (error.message && error.message.includes('already exists')) {
				console.log('Êñá‰ª∂Â∑≤Â≠òÂú®ÔºåÂ∞ùËØïÂä†ËΩΩÁé∞ÊúâÊñá‰ª∂');
				try {
					// Â∞ùËØïÂä†ËΩΩÁé∞ÊúâÊñá‰ª∂
					const file = this.app.vault.getAbstractFileByPath(this.settings.dataFilePath);
					if (file && file instanceof TFile) {
						const content = await this.app.vault.read(file);
						this.settings.markdownTable = content;
						await this.saveData(this.settings);
						console.log('ÊàêÂäüÂä†ËΩΩÁé∞ÊúâÊñá‰ª∂');
					}
					return; // ‰∏çÊäõÂá∫ÈîôËØØ
				} catch (loadError) {
					console.error('Âä†ËΩΩÁé∞ÊúâÊñá‰ª∂Â§±Ë¥•:', loadError);
					// Âç≥‰ΩøÂä†ËΩΩÂ§±Ë¥•‰πü‰∏çÊäõÂá∫ÈîôËØØ
					return;
				}
			}
			 // ËÆ∞ÂΩïÈîôËØØ‰ΩÜ‰∏çÊäõÂá∫ÔºåÈÅøÂÖç‰∏≠Êñ≠Êèí‰ª∂Âä†ËΩΩ
			 console.error('ÂàõÂª∫Êï∞ÊçÆÊ®°ÊùøÂ§±Ë¥•:', error);
			}
	}
	

	convertMarkdownToJson(markdownTable: string): any[] {
        if (!markdownTable.trim()) {
            throw new Error('MarkdownË°®Ê†º‰∏∫Á©∫');
        }
        
        const lines = markdownTable.trim().split('\n');
        if (lines.length < 3) {
            throw new Error('Êó†ÊïàÁöÑMarkdownË°®Ê†ºÊ†ºÂºè');
        }
        
        const headers = lines[0].split('|')
            .map(h => h.trim())
            .filter(h => h.length > 0);
        
        const dataLines = lines.slice(2);
        
        return dataLines.map(line => {
            const values = line.split('|')
                .map(v => v.trim())
                .filter(v => v.length > 0);
            
            if (values.length !== headers.length) {
                throw new Error(`Ë°åÊï∞ÊçÆ‰∏éË°®Â§¥‰∏çÂåπÈÖç: ${line}`);
            }
            
            const rowData: {[key: string]: any} = {};
            headers.forEach((header, index) => {
                rowData[header] = values[index];
            });
            
            return rowData;
        });
    }

    // Ê∑ªÂä† saveMarkdownAsJson ÊñπÊ≥ï
    async saveMarkdownAsJson(): Promise<void> {
        try {
            const jsonData = this.convertMarkdownToJson(this.settings.markdownTable);
            const filePath = this.settings.dataFilePath;
            const file = this.app.vault.getAbstractFileByPath(filePath);
            
            const jsonContent = JSON.stringify(jsonData, null, 2);
            const fileContent = `---
created: ${new Date().toISOString().split('T')[0]}
updated: ${new Date().toISOString().split('T')[0]}
---

# ÊûÅÁÆÄ‰∏ª‰πâÊåëÊàòÁâ©ÂìÅÊï∞ÊçÆ

\`\`\`json
${jsonContent}
\`\`\`
`;
            
            if (file && file instanceof TFile) {
                await this.app.vault.modify(file, fileContent);
            } else {
                await this.app.vault.create(filePath, fileContent);
            }
        } catch (error) {
            throw error;
        }
    }	
	// Ê∑ªÂä†Êõ¥Êñ∞ËßÜÂõæÁöÑÊñπÊ≥ï
    async refreshView() {
        const leaves = this.app.workspace.getLeavesOfType(MINIMALISM_VIEW_TYPE);
        for (const leaf of leaves) {
            if (leaf.view instanceof MinimalismChallengeView) {
                await leaf.view.onOpen();
            }
        }
    }

    // ‰øÆÊîπ saveSettings ÊñπÊ≥ï
    async saveSettings() {
        // ‰øùÂ≠òÊóßÁöÑÊñá‰ª∂Ë∑ØÂæÑÔºåÁî®‰∫éÊØîËæÉ
		const oldFilePath = this.settings.dataFilePath;
		
		await this.saveData(this.settings);
		
		// Ê£ÄÊü•Êñá‰ª∂Ë∑ØÂæÑÊòØÂê¶ÂèòÂåñ
		if (oldFilePath !== this.settings.dataFilePath) {
			// Â¶ÇÊûúÊñá‰ª∂Ë∑ØÂæÑÂèòÂåñÔºåÈáçÊñ∞Âä†ËΩΩÊï∞ÊçÆ
			await this.loadItemsData();
		}
		
		await this.refreshView(); // ‰øùÂ≠òËÆæÁΩÆÂêéÂà∑Êñ∞ËßÜÂõæ
	}
	// Ê∑ªÂä†Âä†ËΩΩÊï∞ÊçÆÁöÑÊñπÊ≥ï
	async loadItemsData() {
		try {
			const filePath = this.settings.dataFilePath;
			const file = this.app.vault.getAbstractFileByPath(filePath);
			
			if (file && file instanceof TFile) {
				const content = await this.app.vault.read(file);
				// Ëß£Êûê Markdown Ë°®Ê†º
				this.settings.markdownTable = content;
				// ‰øùÂ≠òËÆæÁΩÆ‰ΩÜ‰∏çËß¶Âèë saveSettings ÁöÑÈÄíÂΩíË∞ÉÁî®
				await this.saveData(this.settings);
				console.log(`Êï∞ÊçÆÂ∑≤‰ªé ${filePath} Âä†ËΩΩ`); // Êîπ‰∏∫console.logËÄå‰∏çÊòØNotice
			} else {
				console.log(`Êâæ‰∏çÂà∞Êï∞ÊçÆÊñá‰ª∂: ${filePath}`); // Êîπ‰∏∫console.logËÄå‰∏çÊòØNotice
			}
		} catch (error) {
			console.error('Âä†ËΩΩÊï∞ÊçÆÂ§±Ë¥•:', error);
			// ‰∏çÊòæÁ§∫ÈîôËØØÈÄöÁü•ÔºåÈÅøÂÖçÊØèÊ¨°Âä†ËΩΩÈÉΩÊèêÁ§∫
		}
	}

}

// ÂàõÂª∫Êó•ÂéÜËßÜÂõæÔºàÊîπ‰∏∫ItemViewËÄå‰∏çÊòØModalÔºâ
class MinimalismChallengeView extends ItemView {
	plugin: MinimalismChallengePlugin;

	constructor(leaf: WorkspaceLeaf, plugin: MinimalismChallengePlugin) {
		super(leaf);
		this.plugin = plugin;
	}
	
	// Ëé∑ÂèñËßÜÂõæÁ±ªÂûã
	getViewType(): string {
		return MINIMALISM_VIEW_TYPE;
	}
	
	// Ëé∑ÂèñËßÜÂõæÊòæÁ§∫ÂêçÁß∞
	getDisplayText(): string {
		return 'ÊûÅÁÆÄ‰∏ª‰πâÊåëÊàòÊó•ÂéÜ';
	}
	
	// Ëé∑ÂèñËßÜÂõæÂõæÊ†á
	getIcon(): string {
		return 'calendar-with-checkmark';
	}
	
	// ÂΩìËßÜÂõæË¢´ÊâìÂºÄÊó∂
	async onOpen() {
		const contentEl = this.contentEl;
		contentEl.empty();
		contentEl.addClass('minimalism-challenge-view');
		
		// Ê∏≤ÊüìÊó•ÂéÜËßÜÂõæ
		await this.renderCalendarView(contentEl);
	}
	
	async renderCalendarView(containerEl: HTMLElement) {
		// ÂàõÂª∫‰∏ªÂÆπÂô®
	const mainContainer = document.createElement('div');
	mainContainer.className = 'minimalism-calendar-container';
	
	// Ê∑ªÂä†Ê†áÈ¢òÔºåÂåÖÂê´Âπ¥Êúà‰ø°ÊÅØ
	const year = this.plugin.settings.challengeYear;
	const month = this.plugin.settings.challengeMonth;
	
	mainContainer.innerHTML = `
		<div class="minimalism-title" style="
			text-align: center; 
			color: #A67F5D;
			font-family: 'Futura', 'Trebuchet MS', -apple-system;
			font-weight: 700;
			font-size: 80px;
			margin: 20px 0 15px;
			opacity: 0.85;
			letter-spacing: -1.5px;
			position: relative;
		">
			<span style="
				font-size: 15px;
				position: absolute;
				top: 8px;
				right: 30px;
				font-weight: 400;
				opacity: 0.8;
				background: rgba(166, 127, 93, 0.15);
				padding: 2px 10px;
				border-radius: 20px;
				backdrop-filter: blur(2px);
				background-color: rgba(190, 169, 139, 0.1);
				border: 1.5px solid rgba(166, 127, 93, 0.8);
				color: rgba(166, 127, 93, 0.8);
			">${year} ${String(month).padStart(2, '0')}</span>
			30 Days
		</div>
		<div class="minimalism-subtitle" style="
			text-align: center;
			color: #BEA98B;
			font-family: 'Helvetica Neue', 'Arial', -apple-system;
			font-weight: 500;
			font-size: 40px;
			margin: 0 0 30px;
			opacity: 0.75;
			letter-spacing: 0.2px;
		">Minimalism Game</div>
		<div style="
			text-align: center;
			color: #BEA98B;
			font-family: 'Georgia', 'Times New Roman', serif;
			font-weight: 400;
			font-size: 20px;
			font-style: italic;
			margin: 0 0 15px;
			opacity: 0.7;
		">‚Äú Less is more ‚Äù</div>

	`;
		
		try {
			// Âä†ËΩΩÊï∞ÊçÆ
			const data = await this.loadMinimalismData();
			if (!data || data.length === 0) {
				mainContainer.innerHTML += '<div style="text-align: center; padding: 20px;">Êú™ÊâæÂà∞Êï∞ÊçÆÔºåËØ∑Ê£ÄÊü•Êï∞ÊçÆÊñá‰ª∂Ë∑ØÂæÑËÆæÁΩÆ„ÄÇ</div>';
				containerEl.appendChild(mainContainer);
				return;
			}
			
			// Ê∑ªÂä†ÁªüËÆ°Èù¢Êùø
			const statsPanel = this.createStatsPanel(data);
			mainContainer.appendChild(statsPanel);
			
			// Ê∑ªÂä†Êó•ÂéÜË°®Ê†º
			const tableContainer = this.createCalendarTable(data);
			mainContainer.appendChild(tableContainer);
			
			// Ê∑ªÂä†ÁøªËΩ¨Âç°ÁâáÁöÑ‰∫ã‰ª∂ÁõëÂê¨
			setTimeout(() => {
				this.addFlipCardListeners();
			}, 200);
			
		} catch (error) {
			mainContainer.innerHTML += `<div style="text-align: center; padding: 20px; color: red;">Âä†ËΩΩÊï∞ÊçÆÂ§±Ë¥•: ${error.message}</div>`;
		}
		
		containerEl.appendChild(mainContainer);
	}
	
	// Âä†ËΩΩÊûÅÁÆÄ‰∏ª‰πâÊï∞ÊçÆ
	async loadMinimalismData() {
		try {
			// Ëé∑ÂèñÊï∞ÊçÆÊñá‰ª∂Ë∑ØÂæÑ
			const filePath = this.plugin.settings.dataFilePath;
			const fileObj = this.app.vault.getAbstractFileByPath(filePath);
			
			if (!fileObj || !(fileObj instanceof TFile)) {
				console.error('Êï∞ÊçÆÊñá‰ª∂‰∏çÂ≠òÂú®:', filePath);
				return [];
			}
			
			// ËØªÂèñÊñá‰ª∂ÂÜÖÂÆπ
			const content = await this.app.vault.read(fileObj);
			
			// Â∞ùËØï‰ªéÊñá‰ª∂‰∏≠ÊèêÂèñmarkdownË°®Ê†º
			const tableRegex = /\|(.+)\|\n\|([-:\s|]+)\|\n((?:\|.+\|\n?)+)/g;
			const tableMatch = tableRegex.exec(content);
			
			if (tableMatch) {
				// ÊèêÂèñË°®Â§¥ÂíåÊï∞ÊçÆË°å
				const headerLine = tableMatch[1];
				const dataLines = tableMatch[3].trim().split('\n');
				
				// Ëß£ÊûêË°®Â§¥
				const headers = headerLine.split('|')
					.map(h => h.trim())
					.filter(h => h.length > 0);
				
				// Ëß£ÊûêÊï∞ÊçÆË°å
				const allData = dataLines.map(line => {
					const values = line.split('|')
						.map(v => v.trim())
						.filter(v => v.length > 0);
					
					if (values.length !== headers.length) {
						console.warn(`Ë°åÊï∞ÊçÆ‰∏éË°®Â§¥‰∏çÂåπÈÖç: ${line}`);
						return null;
					}
					
					// ÂàõÂª∫Êï∞ÊçÆÂØπË±°
					const rowData: {[key: string]: any} = {};
					headers.forEach((header, index) => {
						// Â∞ùËØïÂ∞ÜÊï∞ÂÄºÂ≠óÊÆµËΩ¨Êç¢‰∏∫Êï∞Â≠ó
						const value = values[index];
						if (['‰ΩøÁî®È¢ëÁéá', 'ÂøÖË¶ÅÊÄß', '‰∏çÂèØÊõø‰ª£ÊÄß', 'Á©∫Èó¥Ë¥üÊãÖ', 'Â§öÂäüËÉΩÊÄß', 'ÊÉÖÊÑü‰ª∑ÂÄº', 'Áª¥Êä§Ë¥πÁî®', 'Ëé∑ÂèñÊàêÊú¨'].includes(header)) {
							rowData[header] = Number(value) || 0;
						} else {
							rowData[header] = value;
						}
					});
					
					return rowData;
				}).filter(item => item !== null);
				
				// ËΩ¨Êç¢‰∏∫ÂÜÖÈÉ®Êï∞ÊçÆÊ†ºÂºè
				const formattedData = allData.map((row: any) => {
					// Â§ÑÁêÜÊó•ÊúüÊ†ºÂºè
					let dateStr = row['Êó•Êúü'] || '';
					dateStr = dateStr.replace(/-/g, '');
					
					return {
						date: dateStr,
						item: row['Áâ©ÂìÅ'] || '',
						memory: row['ËÆ∞ÂøÜ'] || '',
						epitaph: row['ÂëäÂà´ËØ≠'] || '',
						category: row['ÂàÜÁ±ª'] || 'default',
						freq: Number(row['‰ΩøÁî®È¢ëÁéá']) || 0,
						necessity: Number(row['ÂøÖË¶ÅÊÄß']) || 0,
						irreplace: Number(row['‰∏çÂèØÊõø‰ª£ÊÄß']) || 0,
						space: Number(row['Á©∫Èó¥Ë¥üÊãÖ']) || 0,
						multifunction: Number(row['Â§öÂäüËÉΩÊÄß']) || 0,
						emotion: Number(row['ÊÉÖÊÑü‰ª∑ÂÄº']) || 0,
						maintenance: Number(row['Áª¥Êä§Ë¥πÁî®']) || 0,
						cost: Number(row['Ëé∑ÂèñÊàêÊú¨']) || 0
					};
				});
				
				// Ê†πÊçÆÈÄâÂÆöÁöÑÂπ¥‰ªΩÂíåÊúà‰ªΩËøáÊª§Êï∞ÊçÆ
				const year = this.plugin.settings.challengeYear;
				const month = this.plugin.settings.challengeMonth;
				const yearMonthPrefix = `${year}${String(month).padStart(2, '0')}`;
				
				// ËøáÊª§Âá∫ÂΩìÂâçÂπ¥ÊúàÁöÑÊï∞ÊçÆÔºåÁ°Æ‰øùÊó•ÊúüÊ†ºÂºèÊ≠£Á°Æ
				const filteredData = formattedData.filter((item: any) => {
					// Á°Æ‰øùÊó•ÊúüÊòØ8‰ΩçÊï∞Â≠óÊ†ºÂºè YYYYMMDD
					if (item.date.length !== 8) {
						console.warn(`Ë∑≥ËøáÊó†ÊïàÊó•ÊúüÊ†ºÂºè: ${item.date}`);
						return false;
					}
					
					// Ê£ÄÊü•Âπ¥ÊúàÊòØÂê¶ÂåπÈÖç
					const itemYearMonth = item.date.substring(0, 6);
					const matches = itemYearMonth === yearMonthPrefix;
					
					if (matches) {
						console.log(`ÂåπÈÖçÂà∞ËÆ∞ÂΩï: ${item.date}, Áâ©ÂìÅ: ${item.item}`);
					}
					
					return matches;
				});
				
				console.log(`Â∑≤‰ªémarkdownË°®Ê†ºÂä†ËΩΩ ${year}Âπ¥${month}ÊúàÁöÑÊï∞ÊçÆ:`, filteredData);
				return filteredData;
			} else {
				// Â¶ÇÊûúÊ≤°ÊúâÊâæÂà∞markdownË°®Ê†ºÔºåÂ∞ùËØï‰ªéJSONÈÉ®ÂàÜËØªÂèñ
				const jsonRegex = /```json\s*\n(\[[\s\S]*?\])\s*\n```/;
				const jsonMatch = jsonRegex.exec(content);
				
				if (jsonMatch) {
					const jsonString = jsonMatch[1];
					const rawData = JSON.parse(jsonString);
					
					const formattedData = rawData.map((row: any) => ({
						date: row['Êó•Êúü'].replace(/-/g, ''),
						item: row['Áâ©ÂìÅ'],
						memory: row['ËÆ∞ÂøÜ'] || '',
						epitaph: row['ÂëäÂà´ËØ≠'] || '',
						category: row['ÂàÜÁ±ª'] || 'default',
						freq: Number(row['‰ΩøÁî®È¢ëÁéá']) || 0,
						necessity: Number(row['ÂøÖË¶ÅÊÄß']) || 0,
						irreplace: Number(row['‰∏çÂèØÊõø‰ª£ÊÄß']) || 0,
						space: Number(row['Á©∫Èó¥Ë¥üÊãÖ']) || 0,
						multifunction: Number(row['Â§öÂäüËÉΩÊÄß']) || 0,
						emotion: Number(row['ÊÉÖÊÑü‰ª∑ÂÄº']) || 0,
						maintenance: Number(row['Áª¥Êä§Ë¥πÁî®']) || 0,
						cost: Number(row['Ëé∑ÂèñÊàêÊú¨']) || 0
					}));
					
					// Ê†πÊçÆÈÄâÂÆöÁöÑÂπ¥‰ªΩÂíåÊúà‰ªΩËøáÊª§Êï∞ÊçÆ
					const year = this.plugin.settings.challengeYear;
					const month = this.plugin.settings.challengeMonth;
					const yearMonthPrefix = `${year}${String(month).padStart(2, '0')}`;
					
					// ËøáÊª§Âá∫ÂΩìÂâçÂπ¥ÊúàÁöÑÊï∞ÊçÆ
					const filteredData = formattedData.filter((item: any) => 
						item.date.startsWith(yearMonthPrefix) || 
						(item.date.length === 8 && item.date.substring(0, 6) === yearMonthPrefix)
					);
					
					console.log(`Â∑≤‰ªéJSONÂä†ËΩΩ ${year}Âπ¥${month}ÊúàÁöÑÊï∞ÊçÆ:`, filteredData);
					return filteredData;
				}
			}
			
			console.error('Êú™Âú®Êñá‰ª∂‰∏≠ÊâæÂà∞ÊúâÊïàÁöÑÊï∞ÊçÆÊ†ºÂºè');
			return [];
		} catch (error) {
			console.error('Âä†ËΩΩÊï∞ÊçÆÂ§±Ë¥•:', error);
			return []; // ÂèëÁîüÈîôËØØÊó∂ËøîÂõûÁ©∫Êï∞ÁªÑ
		}
	}
	// ËÆ°ÁÆóÂæóÂàÜ - ‰øÆÂ§çÈáçÂ§çÂÆö‰πâÂíåËØ≠Ê≥ïÈîôËØØ
		// ËÆ°ÁÆóÂæóÂàÜ - ‰ΩøÁî®Ëá™ÂÆö‰πâÊùÉÈáç
		calculateScore(item: any) {
			const weights = this.plugin.settings.scoreWeights;
    
			// ËÆ°ÁÆóÊùÉÈáçÊÄªÂíå
			const totalWeight = Object.values(weights).reduce((sum, weight) => sum + weight, 0);
			
			// ÂΩí‰∏ÄÂåñÊùÉÈáç
			const normalizedWeights = Object.fromEntries(
				Object.entries(weights).map(([key, weight]) => [key, weight / totalWeight])
			);
			
			const weightedScores = [
				item.freq * normalizedWeights.freq,          
				item.necessity * normalizedWeights.necessity,     
				item.irreplace * normalizedWeights.irreplace,     
				item.space * normalizedWeights.space,         
				item.multifunction * normalizedWeights.multifunction, 
				item.emotion * normalizedWeights.emotion,       
				item.maintenance * normalizedWeights.maintenance,   
				item.cost * normalizedWeights.cost          
			];
			
			// ËÆ°ÁÆóÊúÄÁªàÂæóÂàÜÔºàÊùÉÈáçÂ∑≤ÂΩí‰∏ÄÂåñÔºåÊó†ÈúÄÂÜçÊ¨°Èô§‰ª•ÊùÉÈáçÊÄªÂíåÔºâ
			const baseScore = weightedScores.reduce((sum, score) => sum + score, 0);
			
			const lifeStageMultiplier = this.getLifeStageMultiplier(this.plugin.settings.lifeStage);
			const finalScore = baseScore * lifeStageMultiplier;
			
			return Math.min(100, Math.max(0, finalScore));
		}
	// ÂàõÂª∫ÁªüËÆ°Èù¢Êùø
	// ÂàõÂª∫ÁªüËÆ°Èù¢Êùø
	createStatsPanel(data: any[]) {
		// ÂØºÂá∫È¢úËâ≤ÂíåÂõæÊ†áÊò†Â∞Ñ
		const setcolors = Object.fromEntries(
			Object.entries(ITEM_CATEGORIES).map(([key, value]) => [key, value.color])
		);
		
		const categoryIcons = Object.fromEntries(
			Object.entries(ITEM_CATEGORIES).map(([key, value]) => [key, value.icon])
		);
		
		// ËÆ°ÁÆóÁªüËÆ°Êï∞ÊçÆ
		const monthStats = data.reduce((stats: any, item: any) => {
			const score = this.calculateScore(item);
			stats.totalScore += score;
			stats.itemCount++;
			stats.categories[item.category] = (stats.categories[item.category] || 0) + 1;
			return stats;
		}, { totalScore: 0, itemCount: 0, categories: {} });
		
		// Á°Æ‰øùÊâÄÊúâÈ¢ÑÂÆö‰πâÁ±ªÁõÆÈÉΩÂ≠òÂú®‰∫éÁªüËÆ°‰∏≠ÔºåÂç≥‰ΩøÊ≤°ÊúâÊï∞ÊçÆ
		Object.keys(ITEM_CATEGORIES).forEach(category => {
			if (category !== 'default' && !monthStats.categories[category]) {
				monthStats.categories[category] = 0;
			}
		});
		
		// ÂàõÂª∫ÁªüËÆ°Èù¢Êùø
		const statsPanel = document.createElement('div');
		statsPanel.style.cssText = `
			display: flex;
			flex-direction: column;
			gap: 15px;
			margin: 20px 0;
			padding: 20px;
		`;
		
		// Êõ¥Êñ∞ÁªüËÆ°Èù¢ÊùøÁöÑHTMLÁªìÊûÑ
		statsPanel.innerHTML = `
			<div class="stats-grid" style="
			display: grid;
			grid-template-columns: 1fr;  /* ÈªòËÆ§ÂçïÂàóÂ∏ÉÂ±Ä */
			gap: clamp(10px, 2vw, 20px);
			margin-bottom: clamp(10px, 2vw, 15px);
			width: 100%;
		">
			<div style="
				display: grid;
				grid-template-columns: minmax(150px, 1fr) minmax(200px, 2fr);  /* ‰øÆÊîπÊúÄÂ∞èÂÆΩÂ∫¶ */
				gap: clamp(10px, 2vw, 20px);
				width: 100%;
				@media (max-width: 768px) {
					grid-template-columns: 1fr;  /* Âú®Â∞èÂ±èÂπï‰∏äÂèò‰∏∫ÂçïÂàó */
				}
			">
				<div style="
					display: flex;
					align-items: center;
					padding: clamp(15px, 3vw, 25px);  /* ‰ΩøÁî® clamp ‰ΩøpaddingËá™ÈÄÇÂ∫î */
					border-radius: 12px;
					min-width: 0;  /* Èò≤Ê≠¢Ê∫¢Âá∫ */
				">
					<div style="
						width: clamp(40px, 8vw, 60px);  /* ÂõæÊ†áÂ§ßÂ∞èËá™ÈÄÇÂ∫î */
						height: clamp(40px, 8vw, 60px);
						display: flex;
						align-items: center;
						justify-content: center;
						border-radius: 12px;
						margin-right: clamp(10px, 3vw, 20px);
					">
						<span style="font-size: clamp(2em, 4vw, 3.2em);">üì¶</span>
					</div>
					<div>
						<div style="
							font-size: clamp(1.5em, 3vw, 2em);
							font-weight: 600;
							color: var(--text-normal);
							margin-bottom: 4px;
						">${monthStats.itemCount}</div>
						<div style="
							font-size: clamp(0.8em, 1.5vw, 0.9em);
							color: var(--text-muted);
						">ÂæÖÂ§ÑÁêÜÁâ©ÂìÅ</div>
					</div>
				</div>

				<div style="
					display: grid;
					grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));  /* ‰øÆÊîπ‰∏∫Ëá™ÈÄÇÂ∫îÂàóÊï∞ */
					gap: clamp(8px, 1.5vw, 15px);
					padding: clamp(10px, 2vw, 15px);
					border-radius: 0px;
					align-items: start;
					min-width: 0;
				">
					${Object.entries(monthStats.categories)
					.sort((a, b) => {
						const orderA = ITEM_CATEGORIES[a[0]]?.order || 999;
						const orderB = ITEM_CATEGORIES[b[0]]?.order || 999;
						return orderA - orderB;
					})
					.map(([category, count]) => `
						<div style="
							display: flex;
							align-items: center;
							gap: 0.5rem;
							padding: 0.3rem 0.6rem;
							background: ${setcolors[category] || setcolors.default}99;
							border-radius: 15px;
							border: 0px dashed ${setcolors[category] || setcolors.default}99;
							width: 100%;
							height: 30px;
							margin: auto;
						">
							<span style="
								font-size: 1.4em;
								min-width: 20px;
								text-align: center;
								flex-shrink: 0;
							">${categoryIcons[category] || categoryIcons.default}</span>
							<div style="
								display: flex;
								align-items: center;
								gap: 4px;
								flex: 1;
								justify-content: space-between;
								min-width: 0;
							">
								<span style="
									font-size: 0.8em;
									font-weight: 500;
									color: var(--text-muted);
									white-space: nowrap;
									overflow: hidden;
									text-overflow: ellipsis;
									max-width: 70%;
								">${category}</span>
								<span style="
									font-size: 1em;
									font-weight: 500;
									color: var(--text-normal);
									flex-shrink: 0;
									margin-right: 8px;
								">${count}</span>
							</div>
						</div>
					`).join('')}
				</div>
			</div>
		
			`;		
		
		// Ê∑ªÂä†ÂæóÂàÜÊåáÂØºËØ¥Êòé
		const scoreGuide = document.createElement('div');
		scoreGuide.style.cssText = `
			position: relative;
			padding: 8px;
			border-radius: 12px;
			font-size: 0.85em;
			margin-bottom: -15px;
		`;
		
		scoreGuide.innerHTML = `
			<div style="
				display: grid;
				grid-template-columns: repeat(auto-fill, minmax(140px, 1fr));
				gap: 10px;
				color: var(--text-normal);
				margin-bottom: 15px;
				overflow-x: auto;
			">
				${[
					{score: '80-100', label: 'ÂøÖÈ°ª‰øùÁïô', icon: "üóÇÔ∏è"},
					{score: '60-79', label: 'Âª∫ËÆÆ‰øùÁïô', icon: "üì•"},
					{score: '40-59', label: 'ÁÅµÊ¥ªÂ§ÑÁêÜ', icon: "üîÑ"},
					{score: '20-39', label: 'Êé®ËçêËàçÂºÉ', icon: "üì§"},
					{score: '0-19', label: 'Á´ãÂç≥Â§ÑÁêÜ', icon: "üóëÔ∏è"}
				].map(item => `
					<div style="
						display: flex;
						align-items: center;
						gap: 8px;
						width: 100%;
						padding: 3px 8px;
						border-radius: 20px;
					">
						<span style="
							display: inline-block;
							width: 6px;
							height: 6px;
							border-radius: 50%;
						"></span>
						<span>${item.icon}</span>
						<span style="font-weight: 500;">${item.score}</span>
						<span>${item.label}</span>
					</div>
				`).join('')}
			</div>
			<div style="
				position: absolute;
				bottom: -5px;
				left: 0;
				width: 100%;
				height: 1px;
				background: var(--background-modifier-border);
				opacity: 0.8;
			"></div>
		`;
		
		statsPanel.appendChild(scoreGuide);
		return statsPanel;
	}
	
	// ÂàõÂª∫Êó•ÂéÜË°®Ê†º
	createCalendarTable(data: any[]) {
		// Ëé∑ÂèñÂàÜÁ±ªÈ¢úËâ≤ÂíåÂõæÊ†á
		function getCategoryColor(category: string) {
			return ITEM_CATEGORIES[category]?.color || ITEM_CATEGORIES.default.color;
		}
		
		function getCategoryIcon(category: string) {
			return ITEM_CATEGORIES[category]?.icon || ITEM_CATEGORIES.default.icon;
		}
		
		// Ëé∑ÂèñÂ§ÑÁêÜÊñπÂºè
		function getDisposalMethod(score: number) {
			const thresholds = Object.keys(DISPOSAL_METHODS)
				.map(Number)
				.sort((a, b) => b - a);
			
			for (const threshold of thresholds) {
				if (score >= threshold) {
					return DISPOSAL_METHODS[threshold];
				}
			}
			return DISPOSAL_METHODS[0];
		}
		
		// ÂàõÂª∫Ë°®Ê†ºÂÆπÂô®
		const tableContainer = document.createElement('div');
		tableContainer.style.cssText = `
			width: 100%;
			margin: 30px 0px;
			padding: 0;
		`;
		
		// ÁîüÊàêË°®Ê†ºHTML
		let tableHtml = `<div class="grid-container" style=" 
			display: grid; 
			grid-template-columns: repeat(auto-fill, minmax(min(150px, 100%), 1fr)); 
			gap: clamp(10px, 2vw, 15px); 
			width: 100%;
		">`;
		
		const totalDays = 30;
		const challengeMonth = this.plugin.settings.challengeMonth;
		
		// ÁîüÊàêÂç°Áâá
		for (let day = 1; day <= totalDays; day++) {
			// ‰ΩøÁî®ËÆæÁΩÆ‰∏≠ÁöÑÂπ¥‰ªΩËÄå‰∏çÊòØÁ°¨ÁºñÁ†ÅÊàñÂΩìÂâçÂπ¥‰ªΩ
			const year = this.plugin.settings.challengeYear;
			const month = this.plugin.settings.challengeMonth;
			const dateStr = `${year}${String(month).padStart(2,'0')}${String(day).padStart(2,'0')}`;
			// Ê∑ªÂä†Ë∞ÉËØïÊó•Âøó
			if (day === 1) {
				console.log("Êü•ÊâæÊó•Êúü:", dateStr);
				console.log("ÂèØÁî®Êï∞ÊçÆ:", data);
			}
			
			const dayRecord = data.find(item => {
				// Ê†áÂáÜÂåñÊó•ÊúüÊ†ºÂºè‰∏∫ YYYYMMDD
				const formattedDate = dateStr;
				const itemDate = item.date;
				
				// Áõ¥Êé•ÊØîËæÉÊ†áÂáÜÂåñÂêéÁöÑÊó•Êúü
				const matches = itemDate === formattedDate;
				
				if (day === 1) {
					console.log(`ÊØîËæÉÊó•Êúü: ${formattedDate} vs ${itemDate}, ÂåπÈÖç: ${matches}`);
				}
				
				return matches;
			});
			
			if (day === 1 && dayRecord) {
				console.log("ÊâæÂà∞Á¨¨1Â§©ËÆ∞ÂΩï:", dayRecord);
			}
			
			const dayLabel = `Day ${day}`; // Á°Æ‰øùËøô‰∏™ÂèòÈáèÂú®ÊâÄÊúâ‰ΩøÁî®
			
			// ÂâçÈù¢Âç°Áâá - ÂëäÂà´ËØ≠
			let frontCard = dayRecord ? `
				<div class="card-front" style="
					position: absolute;
					width: 100%;
					height: 100%;
					display: flex;
					flex-direction: column;
					align-items: center;
					justify-content: center;
					backface-visibility: hidden;
					transition: transform 0.6s;
					background: ${getCategoryColor(dayRecord.category)};
					border-radius: 12px;
					padding: 10px;
					opacity: 0.9;
				">
					<div class="item-card" style="
						display: flex;
						flex-direction: column;
						position: relative;
						gap: 5px;
						width: 100%;
						height: 100%;
						color: white;
					">
						<div style="
							font-size: clamp(0.8em, 1.5vw, 0.9em);
    						line-height: 1.4;
							font-weight: 600;
							font-family: 'Inter', -apple-system, sans-serif;
							opacity: 0.9;
							text-align: right;
							position: absolute;
							top: 2px;
							right: 5px;
						">${dayLabel}</div>
						<div style="
							font-size: 0.95em;
							line-height: 1.4;
							position: absolute;
							top: 40%;
							left: 50%;
							transform: translate(-50%, -50%);
							text-align: center;
							width: 98%;
							overflow-wrap: break-word;
						">${dayRecord.epitaph || dayRecord.item}</div>
						<div style="
							display: flex;
							justify-content: space-between;
							align-items: center;
							padding: 8px 1px;
							border-top: 1px dashed rgba(255,255,255,0.2);
							position: absolute;
							bottom: 3px;
							left: 0;
							right: 0;
							margin: 0 5px;
						">
							<span style="
								display: flex;
								align-items: center;
								margin-left: 5px;
								font-size: 0.95em;
							">${getCategoryIcon(dayRecord.category)}</span>
							<span style="
								font-size: 0.75em;
								padding: 2px 8px;
								border-radius: 20px;
								background: rgba(255,255,255,0.2);
								display: flex;
								align-items: center;
								gap: 4px;
							">
								<div style="
									font-weight: 500;
									color: rgba(255,255,255,0.9);
								">${Math.round(this.calculateScore(dayRecord))}</div>
								${getDisposalMethod(this.calculateScore(dayRecord)).icon}
							</span>
						</div>
					</div>
				</div>` : `
				<div class="card-front" style="
					position: absolute;
					width: 100%;
					height: 100%;
					display: flex;
					flex-direction: column;
					align-items: center;
					justify-content: center;
					backface-visibility: hidden;
					background: ${ITEM_CATEGORIES.default.color};
					border-radius: 12px;
					padding: 10px;
				">
					<div style="
						color: white;
						font-size: 0.9em;
						font-weight: 500;
						font-family: 'Inter', -apple-system, sans-serif;
						text-align: right;
					">${dayLabel}</div>
				</div>`;
			
			// ÂêéÈù¢Âç°Áâá - ÊòæÁ§∫Áâ©ÂìÅÂêçÁß∞ÂíåËÆ∞ÂøÜ
			let backCard = dayRecord ? `
				<div class="card-back" style="
					position: absolute;
					width: 100%;
					height: 100%;
					display: flex;
					flex-direction: column;
					backface-visibility: hidden;
					transform: rotateY(180deg);
					transition: transform 0.6s;
					background: ${getCategoryColor(dayRecord.category)};
					border-radius: 12px;
					padding: 15px 14px;
					color: white;
				">
					
					<h3 style="
						margin: 5px 0 8px;
						text-align: center;
						font-size: 0.9em;
						font-weight: 500;
						letter-spacing: 0.3px;
						opacity: 0.9;
					">${dayRecord.item}</h3>
					
					<div style="
						flex-grow: 1;
						width: 100%;
						overflow-y: auto;
						scrollbar-width: thin;
						scrollbar-color: rgba(255,255,255,0.3) transparent;
					">
						<p style="
							margin: 0;
							font-size: 0.8em;
							line-height: 1.5;
							padding: 0 5px;
							text-align: left;
							opacity: 0.85;
						">${dayRecord.memory}</p>
					</div>
				</div>` : '';
			
			// ÁªÑÂêàÂç°Áâá
			tableHtml += `
				<div class="flip-card" style="
					width: 100%;
					height: 150px;
					perspective: 1000px;
					cursor: ${dayRecord ? 'pointer' : 'default'};
				">
					<div class="flip-card-inner" style="
						position: relative;
						width: 100%;
						height: 100%;
						text-align: center;
						transition: transform 0.7s cubic-bezier(0.68, -0.6, 0.32, 1.6);
						transform-style: preserve-3d;
					">
						${frontCard}
						${backCard}
					</div>
				</div>`;
		}
		
		tableHtml += `</div>`;
		tableContainer.innerHTML = tableHtml;
		
		return tableContainer;
	}
	
	// Ê∑ªÂä†ÁøªËΩ¨Âç°ÁâáÁöÑ‰∫ã‰ª∂ÁõëÂê¨
	// ‰øÆÂ§ç addFlipCardListeners ÊñπÊ≥ï
	addFlipCardListeners() {
		const flipCards = document.querySelectorAll('.flip-card');
		
		flipCards.forEach(card => {
			const inner = card.querySelector('.flip-card-inner');
			const backCard = card.querySelector('.card-back');
			
			if (!backCard) return; // Â¶ÇÊûúÊ≤°ÊúâËÉåÈù¢Âç°ÁâáÔºàÁ©∫ÁôΩÊó•ÊúüÔºâÂàô‰∏çÊ∑ªÂä†‰∫ã‰ª∂
			
			let isFlipped = false;
			
			// Ê£ÄÊü• inner ÂÖÉÁ¥†ÊòØÂê¶Â≠òÂú®
			if (!inner) return;
			
			// Ê∑ªÂä†ÁÇπÂáª‰∫ã‰ª∂Â§ÑÁêÜ
			card.addEventListener('click', () => {
				isFlipped = !isFlipped;
				if (isFlipped) {
					(inner as HTMLElement).style.transform = 'rotateY(180deg)';
				} else {
					(inner as HTMLElement).style.transform = 'rotateY(0deg)';
				}
			});
		});
	}
	
	

	// Ëé∑ÂèñÁîüÊ¥ªÈò∂ÊÆµÁ≥ªÊï∞
	getLifeStageMultiplier(stage: number) {
		const multipliers: { [key: number]: number } = {
			1: 0.8,  // ÁÆÄÁ∫¶Èò∂ÊÆµ
			2: 1.0,  // Âπ≥Ë°°Èò∂ÊÆµ
			3: 1.3   // ÁßØÁ¥ØÈò∂ÊÆµ
		};
		return multipliers[stage] || 1.0;
	}
	
	// ‰øÆÊîπ onClose ÊñπÊ≥ïËøîÂõû Promise<void>
	async onClose(): Promise<void> {
		const {contentEl} = this;
		contentEl.empty();
	}
}

// ÂàõÂª∫ËÆæÁΩÆÈÄâÈ°πÂç°
class MinimalismChallengeSettingTab extends PluginSettingTab {
	plugin: MinimalismChallengePlugin;
	markdownTextarea: HTMLTextAreaElement;

	constructor(app: App, plugin: MinimalismChallengePlugin) {
		super(app, plugin);
		this.plugin = plugin;
	}

	// ‰øÆÊîπËÆæÁΩÆÈÄâÈ°πÂç°ÁöÑ display ÊñπÊ≥ï
	display(): void {
		const {containerEl} = this;
		containerEl.empty();

		containerEl.createEl('h2', {text: 'ÊûÅÁÆÄ‰∏ª‰πâÊåëÊàòÊó•ÂéÜËÆæÁΩÆ'});

		// Âü∫Êú¨ËÆæÁΩÆ
		containerEl.createEl('h3', {text: 'Âü∫Êú¨ËÆæÁΩÆ'});

		new Setting(containerEl)
			.setName('ÊåëÊàòÂπ¥‰ªΩ')
			.setDesc('ËÆæÁΩÆÂΩìÂâçÊåëÊàòÁöÑÂπ¥‰ªΩ')
			.addText(text => text
				.setPlaceholder('ËæìÂÖ•Âπ¥‰ªΩ')
				.setValue(this.plugin.settings.challengeYear.toString())
				.onChange(async (value) => {
					const year = parseInt(value);
					if (!isNaN(year) && year > 2000 && year < 2100) {
						this.plugin.settings.challengeYear = year;
						await this.plugin.saveSettings();
					}
				})
				// Ê∑ªÂä†ÂÆΩÂ∫¶ÈôêÂà∂
				.inputEl.style.width = '100px');

		new Setting(containerEl)
			.setName('ÊåëÊàòÊúà‰ªΩ')
			.setDesc('ËÆæÁΩÆÂΩìÂâçÊåëÊàòÁöÑÊúà‰ªΩ')
			.addDropdown(dropdown => dropdown
				.addOptions({
					'1': '1Êúà', '2': '2Êúà', '3': '3Êúà', '4': '4Êúà',
					'5': '5Êúà', '6': '6Êúà', '7': '7Êúà', '8': '8Êúà',
					'9': '9Êúà', '10': '10Êúà', '11': '11Êúà', '12': '12Êúà'
				})
				.setValue(this.plugin.settings.challengeMonth.toString())
				.onChange(async (value) => {
					this.plugin.settings.challengeMonth = parseInt(value);
					await this.plugin.saveSettings();
				}));

		new Setting(containerEl)
			.setName('ÁîüÊ¥ªÈò∂ÊÆµ')
			.setDesc('ËÆæÁΩÆÊÇ®ÂΩìÂâçÁöÑÁîüÊ¥ªÈò∂ÊÆµÔºåÂΩ±ÂìçÁâ©ÂìÅËØÑÂàÜ')
			.addDropdown(dropdown => dropdown
				.addOptions({
					'1': 'ÁÆÄÁ∫¶Èò∂ÊÆµ (0.8ÂÄç)',
					'2': 'Âπ≥Ë°°Èò∂ÊÆµ (1.0ÂÄç)',
					'3': 'ÁßØÁ¥ØÈò∂ÊÆµ (1.3ÂÄç)'
				})
				.setValue(this.plugin.settings.lifeStage.toString())
				.onChange(async (value) => {
					this.plugin.settings.lifeStage = parseInt(value);
					await this.plugin.saveSettings();
				}));

		new Setting(containerEl)
		.setName('Êï∞ÊçÆÊñá‰ª∂Ë∑ØÂæÑ')
		.setDesc('ËÆæÁΩÆÂ≠òÂÇ®Áâ©ÂìÅÊï∞ÊçÆÁöÑÊñá‰ª∂Ë∑ØÂæÑ')
		.addText(text => text
			.setPlaceholder('minimalism_items.md')
			.setValue(this.plugin.settings.dataFilePath)
			.onChange(async (value) => {
				this.plugin.settings.dataFilePath = value;
				await this.plugin.saveSettings();
			}));
		
		// Ê∑ªÂä†ÂàõÂª∫Ê®°ÊùøÊñá‰ª∂ÊåâÈíÆ - Âè™‰øùÁïôËøô‰∏Ä‰∏™
		new Setting(containerEl)
			.setName('ÂàõÂª∫Êï∞ÊçÆÊ®°Êùø')
			.setDesc('ÂàõÂª∫‰∏Ä‰∏™ÂåÖÂê´MarkdownË°®Ê†ºÁöÑÊ®°ÊùøÊñá‰ª∂ÔºåÊÇ®ÂèØ‰ª•Áõ¥Êé•Âú®Êñá‰ª∂‰∏≠ÁºñËæëÊï∞ÊçÆ')
			.addButton(button => button
				.setButtonText('ÂàõÂª∫Ê®°ÊùøÊñá‰ª∂')
				.onClick(async () => {
					await this.plugin.createDataFileTemplate();
				}));
		// ËØÑÂàÜÊåáÂçó

		// ËØÑÂàÜÊùÉÈáçËÆæÁΩÆ - ÊîπËøõÂ∏ÉÂ±Ä
		containerEl.createEl('h3', {text: 'ËØÑÂàÜÊùÉÈáçËÆæÁΩÆ'});
		// Âú®ÊâÄÊúâËÆæÁΩÆÈ°π‰πãÂêéÊ∑ªÂä†È°πÁõÆËØ¥Êòé

		// Ê∑ªÂä†ÊùÉÈáçËØ¥Êòé
		const weightDescription = containerEl.createEl('div', {
			attr: {
				style: 'margin-bottom: 20px; padding: 10px; background: var(--background-secondary); border-radius: 5px;'
			}
		});
		weightDescription.innerHTML = `
			<p style="margin: 0 0 10px 0; font-size: 0.9em;">ËØÑÂàÜËÆ°ÁÆóËØ¥ÊòéÔºöÊúÄÁªàÂæóÂàÜ = (ÂêÑÊåáÊ†áÂæóÂàÜ √ó ÂΩí‰∏ÄÂåñÊùÉÈáç) √ó ÁîüÊ¥ªÈò∂ÊÆµÁ≥ªÊï∞</p>
		`;
		new Setting(containerEl)
			.addButton(button => button
				.setButtonText('ÈáçÁΩÆËÆæÁΩÆ')
				.onClick(async () => {
					await this.plugin.resetSettings();
					// ÈáçÊñ∞Âä†ËΩΩËÆæÁΩÆÈ°µÈù¢‰ª•ÊòæÁ§∫Êñ∞ÂÄº
					this.display();
				}));
		// ÂàõÂª∫‰∏Ä‰∏™Áªü‰∏ÄÁöÑÂ§ßÂ§ñÊ°Ü
		const weightsContainer = containerEl.createEl('div', {
			attr: {
				style: 'border: 1px solid var(--background-modifier-border); border-radius: 8px; padding: 15px; background: var(--background-primary); margin-bottom: 20px;'
			}
		});

		// ÂàõÂª∫ÁΩëÊ†ºÂ∏ÉÂ±ÄÂÆπÂô®
		const gridContainer = weightsContainer.createEl('div', {
			attr: {
				style: 'display: grid; grid-template-columns: repeat(auto-fill, minmax(250px, 1fr)); gap: 15px;'
			}
		});

		// ÂÆö‰πâËØÑÂàÜÂõ†Á¥†
		const scoreFactors = [
			{id: 'freq', name: '‰ΩøÁî®È¢ëÁéá', desc: 'Ë∂äÂ∏∏Áî®ÂàÜÂÄºË∂äÈ´ò'},
			{id: 'necessity', name: 'ÂøÖË¶ÅÊÄß', desc: 'ÂØπÊó•Â∏∏ÁîüÊ¥ªÁöÑÂøÖË¶ÅÁ®ãÂ∫¶'},
			{id: 'irreplace', name: '‰∏çÂèØÊõø‰ª£ÊÄß', desc: 'Ë∂äÈöæÊõø‰ª£ÂàÜÂÄºË∂äÈ´ò'},
			{id: 'space', name: 'Á©∫Èó¥Ë¥üÊãÖ', desc: 'Âç†Áî®Á©∫Èó¥Ë∂äÂêàÁêÜÂàÜÂÄºË∂äÈ´ò'},
			{id: 'multifunction', name: 'Â§öÂäüËÉΩÊÄß', desc: 'ÂäüËÉΩË∂äÂ§öÂàÜÂÄºË∂äÈ´ò'},
			{id: 'emotion', name: 'ÊÉÖÊÑü‰ª∑ÂÄº', desc: 'ÊÉÖÊÑü‰ª∑ÂÄºË∂äÈ´òÂàÜÂÄºË∂äÈ´ò'},
			{id: 'maintenance', name: 'Áª¥Êä§Ë¥πÁî®', desc: 'Áª¥Êä§ÊàêÊú¨Ë∂ä‰ΩéÂàÜÂÄºË∂äÈ´ò'},
			{id: 'cost', name: 'Ëé∑ÂèñÊàêÊú¨', desc: 'ÊÄß‰ª∑ÊØîË∂äÈ´òÂàÜÂÄºË∂äÈ´ò'}
		];

		// ‰∏∫ÊØè‰∏™ËØÑÂàÜÂõ†Á¥†ÂàõÂª∫ËÆæÁΩÆÈ°πÔºå‰ΩÜ‰∏ç‰ΩøÁî®ÂçïÁã¨ÁöÑËæπÊ°Ü
		scoreFactors.forEach(factor => {
			const factorContainer = gridContainer.createEl('div', {
				attr: {
					style: 'padding: 8px; border-bottom: 1px dashed var(--background-modifier-border);'
				}
			});
			
			// ÂàõÂª∫Ê†áÈ¢òÂíåÊèèËø∞
			factorContainer.createEl('div', {
				text: factor.name,
				attr: {
					style: 'font-weight: 500; margin-bottom: 5px;'
				}
			});
			
			factorContainer.createEl('div', {
				text: factor.desc,
				attr: {
					style: 'font-size: 0.8em; color: var(--text-muted); margin-bottom: 8px;'
				}
			});
			
			// ÂàõÂª∫ÊªëÂùóÂíåÂÄºÊòæÁ§∫
			const sliderContainer = factorContainer.createEl('div', {
				attr: {
					style: 'display: flex; align-items: center; gap: 10px;'
				}
			});
			
			const slider = sliderContainer.createEl('input', {
				attr: {
					type: 'range',
					min: '0',
					max: '1',
					step: '0.1',
					value: this.plugin.settings.scoreWeights[factor.id].toString(),
					style: 'flex: 1;'
				}
			});
			
			const valueDisplay = sliderContainer.createEl('span', {
				text: this.plugin.settings.scoreWeights[factor.id].toString(),
				attr: {
					style: 'min-width: 30px; text-align: center;'
				}
			});
			
			// Ê∑ªÂä†‰∫ã‰ª∂ÁõëÂê¨
			slider.addEventListener('input', async (e) => {
				const value = parseFloat((e.target as HTMLInputElement).value);
				this.plugin.settings.scoreWeights[factor.id] = value;
				valueDisplay.textContent = value.toString();
				await this.plugin.saveSettings();
			});
		});
		containerEl.createEl('h3', {text: 'È°πÁõÆËØ¥Êòé'});
		
		const projectDescription = containerEl.createEl('div', {
			attr: {
				style: 'margin-top: 20px; padding: 15px; background: var(--background-secondary); border-radius: 8px; max-height: 500px; overflow-y: auto;'
			}
		});
		
		// Ê∑ªÂä†Ëá™ÂÆö‰πâÊªöÂä®Êù°Ê†∑Âºè
		const scrollbarStyle = containerEl.createEl('style', {
			text: `
				div[style*="max-height: 500px"] {
					scrollbar-width: thin;
					scrollbar-color: var(--scrollbar-thumb-bg) var(--scrollbar-track-bg);
				}
				div[style*="max-height: 500px"]::-webkit-scrollbar {
					width: 8px;
				}
				div[style*="max-height: 500px"]::-webkit-scrollbar-track {
					background: var(--background-secondary-alt);
					border-radius: 4px;
				}
				div[style*="max-height: 500px"]::-webkit-scrollbar-thumb {
					background: var(--scrollbar-thumb-bg, rgba(0, 0, 0, 0.2));
					border-radius: 4px;
				}
				div[style*="max-height: 500px"]::-webkit-scrollbar-thumb:hover {
					background: var(--scrollbar-thumb-bg-hover, rgba(0, 0, 0, 0.3));
				}
			`
		});
		
		projectDescription.innerHTML = `
			<h4 style="margin-top: 0; margin-bottom: 10px; color: var(--text-normal);">‰∏∫‰ªÄ‰πàË¶ÅÂÅöÊûÅÁÆÄ‰∏ª‰πâÊåëÊàòÔºü</h4>
			<p style="margin-bottom: 15px; font-size: 0.9em; line-height: 1.5; color: var(--text-normal);">
				ÊûÅÁÆÄ‰∏ª‰πâÊåëÊàòÔºàMinimalism GameÔºâÊòØ‰∏ÄÁßçÂ∏ÆÂä©‰∫∫‰ª¨ÂáèÂ∞ëÁâ©ÂìÅÂç†Áî®„ÄÅÁÆÄÂåñÁîüÊ¥ªÁöÑÂÆûË∑µÊñπÊ≥ï„ÄÇÂú®Áé∞‰ª£Ê∂àË¥πÁ§æ‰ºö‰∏≠ÔºåÊàë‰ª¨ÂæÄÂæÄÁßØÁ¥Ø‰∫ÜÂ§ßÈáè‰∏çÂøÖË¶ÅÁöÑÁâ©ÂìÅÔºåËøô‰∫õÁâ©ÂìÅ‰∏ç‰ªÖÂç†Áî®Á©∫Èó¥ÔºåËøò‰ºöÊ∂àËÄóÊàë‰ª¨ÁöÑÁ≤æÂäõÂíåÊ≥®ÊÑèÂäõ„ÄÇÁîüÊ¥ªË∂äÁÆÄÂçïÔºåÂ∞±ÊúâË∂äÂ§öÊó∂Èó¥ÂèØ‰∏ìÊ≥®Âú®ÂÅ•Â∫∑„ÄÅÂÖ≥Á≥ª„ÄÅÂàõÈÄ†Âäõ„ÄÅËÅåÊ∂Ø‰∏ä„ÄÇÈÄöËøáËøô‰∏™ÊåëÊàòÔºåÊàë‰ª¨ÂèØ‰ª•Ôºö
				<ul style="margin-top: 8px; padding-left: 20px; font-size: 0.9em;">
					<li>ÈáçÊñ∞ÂÆ°ËßÜÊàë‰ª¨‰∏éÁâ©ÂìÅÁöÑÂÖ≥Á≥ª</li>
					<li>ÂáèÂ∞ë‰∏çÂøÖË¶ÅÁöÑÁâ©Ë¥®Âç†Êúâ</li>
					<li>‰∏∫ÁúüÊ≠£ÈáçË¶ÅÁöÑ‰∫ãÁâ©ËÖæÂá∫Á©∫Èó¥</li>
					<li>ÂüπÂÖªÊõ¥Âä†Ëá™ËßâÁöÑÊ∂àË¥π‰π†ÊÉØ</li>
					<li>ÂáèËΩªÂøÉÁêÜË¥üÊãÖÔºåËé∑ÂæóÊõ¥Â§öËá™Áî±ÊÑü</li>
				</ul>
			</p>
			
			<h4 style="margin-bottom: 10px; color: var(--text-normal);">ÊåëÊàòËßÑÂàôËØ¥Êòé</h4>
			<p style="font-size: 0.9em; line-height: 1.5; color: var(--text-normal);">
				ÊûÅÁÆÄ‰∏ª‰πâÊåëÊàòÁöÑÂü∫Êú¨ËßÑÂàôÂ¶Ç‰∏ãÔºö
				<ol style="margin-top: 8px; padding-left: 20px; font-size: 0.9em;">
					<li><strong>‰∏∫Êúü30Â§©</strong>ÔºöÊåëÊàòÊåÅÁª≠‰∏Ä‰∏™ÊúàÔºà30Â§©Ôºâ„ÄÇ</li>
					<li><strong>ÊØèÊó•Â§ÑÁêÜÁâ©ÂìÅ</strong>ÔºöÊØèÂ§©ÈúÄË¶ÅÂ§ÑÁêÜÊéâ1‰ª∂Áâ©ÂìÅ„ÄÇ</li>
					<li><strong>ËÆ∞ÂΩï‰∏éÂèçÊÄù</strong>ÔºöÂØπ‰∫éÊØè‰ª∂Áâ©ÂìÅÔºåËÆ∞ÂΩïÂÆÉÁöÑÂü∫Êú¨‰ø°ÊÅØ„ÄÅ‰ΩøÁî®ÂéÜÂè≤„ÄÅÊÉÖÊÑüËÅîÁ≥ªÔºå‰ª•Âèä‰∏∫‰ªÄ‰πàÂÜ≥ÂÆöÂ§ÑÁêÜÂÆÉ„ÄÇ</li>
					<li><strong>ËØÑÂàÜÁ≥ªÁªü</strong>ÔºöÈÄöËøáÂ§ö‰∏™Áª¥Â∫¶Ôºà‰ΩøÁî®È¢ëÁéá„ÄÅÂøÖË¶ÅÊÄß„ÄÅÊÉÖÊÑü‰ª∑ÂÄºÁ≠âÔºâÂØπÁâ©ÂìÅËøõË°åËØÑÂàÜÔºåÂ∏ÆÂä©ÂÜ≥ÂÆöÊòØÂê¶‰øùÁïô„ÄÇ</li>
					<li><strong>Â§ÑÁêÜÊñπÂºè</strong>ÔºöÊ†πÊçÆÁâ©ÂìÅÁöÑËØÑÂàÜÂíåÁä∂ÊÄÅÔºåÈÄâÊã©ÈÄÇÂΩìÁöÑÂ§ÑÁêÜÊñπÂºèÔºö
						<ul style="margin-top: 5px; padding-left: 15px;">
							<li>ÊçêËµ†ÔºöÈÄÇÂêàÁä∂ÊÄÅËâØÂ•Ω‰ΩÜ‰∏çÂÜçÈúÄË¶ÅÁöÑÁâ©ÂìÅ</li>
							<li>Âá∫ÂîÆÔºöÊúâ‰∏ÄÂÆö‰ª∑ÂÄºÁöÑÁâ©ÂìÅ</li>
							<li>ÂõûÊî∂Ôºö‰∏çËÉΩÁªßÁª≠‰ΩøÁî®‰ΩÜÂèØÂõûÊî∂ÁöÑÁâ©ÂìÅ</li>
							<li>‰∏¢ÂºÉÔºöÊó†Ê≥ïÂõûÊî∂‰∏îÊó†‰ΩøÁî®‰ª∑ÂÄºÁöÑÁâ©ÂìÅ</li>
							<li>ÈáçÊñ∞ÂÆâÁΩÆÔºö‰ªçÊúâ‰ª∑ÂÄº‰ΩÜÈúÄË¶ÅÊõ¥ÂêàÈÄÇ‰ΩçÁΩÆÁöÑÁâ©ÂìÅ</li>
						</ul>
					</li>
				</ol>
			</p>
			
			<h4 style="margin-bottom: 10px; color: var(--text-normal);">‰ΩøÁî®Âª∫ËÆÆ</h4>
			<p style="font-size: 0.9em; line-height: 1.5; color: var(--text-normal);">
				<ul style="padding-left: 20px; font-size: 0.9em;" >
					<li>‰ªéÁÆÄÂçïÁöÑÁâ©ÂìÅÂºÄÂßãÔºåÈÄêÊ∏êËøáÊ∏°Âà∞Êõ¥ÊúâÊÉÖÊÑüËÅîÁ≥ªÁöÑÁâ©ÂìÅ</li>
					<li>ÈÇÄËØ∑ÊúãÂèãÊàñÂÆ∂‰∫∫‰∏ÄËµ∑ÂèÇ‰∏éÔºå‰∫íÁõ∏ÈºìÂä±ÂíåÁõëÁù£</li>
					<li>‰∏çË¶ÅÊÄ•‰∫éÊ±ÇÊàêÔºåÂÖ≥Ê≥®ËøáÁ®ã‰∏≠ÁöÑÊÑüÂèóÂíåÂèòÂåñ</li>
					<li>ÂÆöÊúüÂõûÈ°æËÆ∞ÂΩïÔºåÂèçÊÄùËá™Â∑±ÁöÑÊ∂àË¥πÂíåÊåÅÊúâ‰π†ÊÉØ</li>
					<li>ÂÆåÊàêÊåëÊàòÂêéÔºåÂ∞ùËØïÂ∞ÜÊûÅÁÆÄÁêÜÂøµËûçÂÖ•Êó•Â∏∏ÁîüÊ¥ª</li>
				</ul>
			</p>
			
			<div style="margin-top: 15px; font-size: 0.9em; font-style: italic; color: var(--text-muted); text-align: center;">
				"Êã•ÊúâÊõ¥Â∞ëÔºå‰ΩìÈ™åÊõ¥Â§ö"
			</div>

			<h4 style="margin-bottom: 10px; color: var(--text-normal);">Êèí‰ª∂‰ΩøÁî®ËØ¥Êòé</h4>
			<p style="font-size: 0.9em; line-height: 1.5; color: var(--text-normal);">
				<ol style="padding-left: 20px; font-size: 0.9em;">
					<li><strong>ÂàùÂßãËÆæÁΩÆ</strong>Ôºö
						<ul style="margin-top: 5px; padding-left: 15px;">
							<li>ÂÆâË£ÖÊèí‰ª∂ÂêéÔºåÂú®ËÆæÁΩÆ‰∏≠ËÆæÁΩÆÊåëÊàòÂπ¥‰ªΩÂíåÊúà‰ªΩ</li>
							<li>ÈÄâÊã©ÈÄÇÂêàÊÇ®ÁöÑÁîüÊ¥ªÈò∂ÊÆµÔºàÁÆÄÁ∫¶„ÄÅÂπ≥Ë°°ÊàñÁßØÁ¥ØÔºâ</li>
							<li>ËÆæÁΩÆÊï∞ÊçÆÊñá‰ª∂Ë∑ØÂæÑÔºåÈªòËÆ§‰∏∫ minimalism_items.md</li>
							<li>ÁÇπÂáª"ÂàõÂª∫Ê®°ÊùøÊñá‰ª∂"ÊåâÈíÆÁîüÊàêÂàùÂßãÊï∞ÊçÆÊñá‰ª∂</li>
						</ul>
					</li>
					<li><strong>Ë∞ÉÊï¥ËØÑÂàÜÊùÉÈáç</strong>Ôºö
						<ul style="margin-top: 5px; padding-left: 15px;">
							<li>Ê†πÊçÆÊÇ®ÁöÑ‰∏™‰∫∫ÊÉÖÂÜµË∞ÉÊï¥ÂêÑÈ°πËØÑÂàÜÂõ†Á¥†ÁöÑÊùÉÈáç</li>
							<li>ÊùÉÈáçËåÉÂõ¥‰ªé0Âà∞1ÔºåÊï∞ÂÄºË∂äÈ´òË°®Á§∫ËØ•Âõ†Á¥†Ë∂äÈáçË¶Å</li>
							<li>Â¶ÇÈúÄÊÅ¢Â§çÈªòËÆ§ËÆæÁΩÆÔºåÁÇπÂáª"ÈáçÁΩÆËÆæÁΩÆ"ÊåâÈíÆ</li>
						</ul>
					</li>
					<li><strong>ËÆ∞ÂΩïÁâ©ÂìÅ</strong>Ôºö
						<ul style="margin-top: 5px; padding-left: 15px;">
							<li>ÊâìÂºÄÁîüÊàêÁöÑÊï∞ÊçÆÊñá‰ª∂ÔºàÈªòËÆ§‰∏∫ minimalism_items.mdÔºâ</li>
							<li>Âú®MarkdownË°®Ê†º‰∏≠Ê∑ªÂä†Êñ∞ÁöÑÁâ©ÂìÅËÆ∞ÂΩï</li>
							<li>ÊåâÁÖßË°®Â§¥Ê†ºÂºèÂ°´ÂÜôÁâ©ÂìÅ‰ø°ÊÅØÂíåÂêÑÈ°πËØÑÂàÜ</li>
							<li>Êó•ÊúüÊ†ºÂºè‰∏∫ YYYY-MM-DDÔºåÂ¶Ç 2023-05-01</li>
						</ul>
					</li>
					<li><strong>Êü•ÁúãÊó•ÂéÜËßÜÂõæ</strong>Ôºö
						<ul style="margin-top: 5px; padding-left: 15px;">
							<li>ÁÇπÂáªÂ∑¶‰æßËæπÊ†è‰∏≠ÁöÑ"ÊûÅÁÆÄ‰∏ª‰πâÊåëÊàòÊó•ÂéÜ"ÂõæÊ†á</li>
							<li>Êó•ÂéÜËßÜÂõæ‰ºöÊòæÁ§∫ÂΩìÂâçÊúà‰ªΩÂ∑≤ËÆ∞ÂΩïÁöÑÁâ©ÂìÅ</li>
							<li>ÁÇπÂáªÂç°ÁâáÂèØ‰ª•ÁøªËΩ¨Êü•ÁúãÁâ©ÂìÅËØ¶ÁªÜ‰ø°ÊÅØ</li>
							<li>È°∂ÈÉ®ÁªüËÆ°Èù¢ÊùøÊòæÁ§∫Áâ©ÂìÅÊÄªÊï∞ÂíåÂàÜÁ±ªÁªüËÆ°</li>
						</ul>
					</li>
					<li><strong>ËØÑÂàÜËß£ËØª</strong>Ôºö
						<ul style="margin-top: 5px; padding-left: 15px;">
							<li>80-100ÂàÜÔºöÂøÖÈ°ª‰øùÁïôÁöÑÁâ©ÂìÅ</li>
							<li>60-79ÂàÜÔºöÂª∫ËÆÆ‰øùÁïôÁöÑÁâ©ÂìÅ</li>
							<li>40-59ÂàÜÔºöÂèØÁÅµÊ¥ªÂ§ÑÁêÜÁöÑÁâ©ÂìÅ</li>
							<li>20-39ÂàÜÔºöÊé®ËçêËàçÂºÉÁöÑÁâ©ÂìÅ</li>
							<li>0-19ÂàÜÔºöÂª∫ËÆÆÁ´ãÂç≥Â§ÑÁêÜÁöÑÁâ©ÂìÅ</li>
						</ul>
					</li>
					<li><strong>Êï∞ÊçÆÁÆ°ÁêÜ</strong>Ôºö
						<ul style="margin-top: 5px; padding-left: 15px;">
							<li>ÊâÄÊúâÊï∞ÊçÆ‰øùÂ≠òÂú®MarkdownÊñá‰ª∂‰∏≠Ôºå‰æø‰∫éÂ§á‰ªΩÂíåËøÅÁßª</li>
							<li>ÂèØ‰ª•ÈöèÊó∂ÁºñËæëÊï∞ÊçÆÊñá‰ª∂‰øÆÊîπÂ∑≤ÊúâËÆ∞ÂΩï</li>
							<li>‰øÆÊîπÂêéÈáçÊñ∞ÊâìÂºÄÊó•ÂéÜËßÜÂõæÂç≥ÂèØÁúãÂà∞Êõ¥Êñ∞</li>
						</ul>
					</li>
				</ol>
			</p>
		`;
		

	}
	
}

